
	Copyright (C) 2011 by pieter@nr8.nl

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	
	
	
	Introduction:

	Because app interfaces are written for specific HTML5 browsers  
	I felt the need to write a lightweight js lib with page elements
	rather than pages. The names have been taken from JQuery for desktops
	and if you dive into the structure you can think of util.js in a Dojo-like
	manner. It's a bit of modular and is made primarily for abstracting app 
	natural language specific data structures, in short: for displaying text.
	I've developed this so far for the Android platform, but it shouldn't be hard
	to extend to other browsers.


	Goals of util.js:
	
	simple, easy to learn, lightweight, powerfull in an object oriented way,
	specially made for apps, multiple languages & formats,
	string formatting, number & currency formatting 
	
	Util proper is the two files validations.js and util.js 
	
	eg.
==CODE============================================================================	
	<script type='text/javascript' src='pathToUtil/validations.js'></script>
	<script type='text/javascript' src='pathToUtil/util.js'></script>
==END=============================================================================	
	
	You can also use the full version by using the loader:
==CODE============================================================================	
	<script type='text/javascript' src='pathToUtil/loader.js'></script>
==END=============================================================================		

	String formatting (util proper):
	
	1) Capitalizes first non-tag string character of string or dot terminated phrases
	2) Adds space after dot in a phrase
	3) Removes double space
	4) Removes space before dot
	5) Leaves abbreviations as they are
	6) Truncates to number of characters and tries to round up on space
	7) Adds an optional string or ' ...' (to the last open fitting tag) when the string has been truncated


Examples:
==CODE============================================================================	

	util.ready(function() // If using the loader
	{
		var msg = 'fits in as many words as possible when first word in string is shorter then limit'
			.toLimitedFormattedHTML(23)
			
		// msg now eq: 'Fits in as many words ...'
	})
	
	// strip all dots and space:
		util.trim('1000 AA', true)
		
	// format numbers to type and locale
		var res = 'average of &%'.format([1.5], 'precision:1', '&')

	// handle input			
		util.trim(null).isEmpty()

	// no parser, just the ones builtin (json and xml)
		util.toJson("[
			{'name':'pieter\'s'},
			{'name':'lo  \\\\  pi'},
			{'name':'Kilo zei:\\\"Hoera!\\\"'}]")[2].name		
	
	// with a struct:	
		var msg = new util.struct([String], {msg1:'total %', msg2:'Bye '})
		var d = msg.format.apply(msg.data.msg1, [[1.5], 'float:2'])
		var m = msg.toLimitedFormattedText.apply(d, [15])


	// example enum:
		util.unum('1000', '1002').forEach(function(pnumber)
		{
			util.unum(pnumber + 'AZ', pnumber + 'BB', 
			{
				regexp:RegExp(/\d{4}[A-Z]{2}/),
				onunumNext:function(pcode)
				{
					alert(pcode)
				}
			})
		})	


	// example options:
	option = ['optionFoo', 'optionBar', 'optionBaz'].unum()
                    
	config = util.struct([util.options], {value:0})

	config.set([option.optionFoo, !option.optionBar])

	config.get() & option.optionFoo
	


	// example cardgame setup
	var deck = []
	var set = {A:'spade',B:'coppe', C:'denari', D:'bastoni'}
	
	function card()
	{	
		return this
	}
	card.prototype.display = function()
	{
		alert(set[this.data.kind].toString().toFirstCharUppercase() + " " + this.data.name)
	}

	util.unum('A', 'D')
	 .forEach(
		function(kind)
		{
			util.unum('AA', 'AD')
			 .concat(util.unum(2, 10))
				.forEach(
					function(n)
					{
						var c = util.mixin(card, {kind:kind, name:n, value:n})
						deck.push(c)
						c.display()
					}
				)		
		}
	)
	
			
==END=============================================================================
